{"version":3,"sources":["components/employeeCard/index.js","components/employeeList/index.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeCard","props","src","picture","alt","firstName","lastName","email","phone","state","EmployeeList","useState","employees","employeeArr","setEmployeeArr","id","type","onChange","e","value","search","filteredArr","i","length","name","first","toLowerCase","startsWith","push","toString","location","last","filterEmployees","target","document","getElementById","className","onClick","currentTarget","textContent","map","employee","large","key","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4/nNA4BeA,MAzBf,SAAuBC,GACnB,OACI,4BACI,4BACI,yBAAKC,IAAKD,EAAME,QAASC,IAAI,SAEjC,4BACKH,EAAMI,WAEX,4BACKJ,EAAMK,UAEX,4BACKL,EAAMM,OAEX,4BACKN,EAAMO,OAEX,4BACKP,EAAMQ,S,aCkFRC,MAnGf,WAAyB,IAAD,EACkBC,mBAASC,GAD3B,mBACbC,EADa,KACAC,EADA,KAkDpB,OACI,6BACI,yBAAKC,GAAG,gBACJ,8BACI,6CACI,4BAAQA,GAAG,aACP,8CACA,6CACA,yCACA,yCACA,2CAGR,yBAAKA,GAAG,cACJ,0DACA,2BAAOC,KAAK,OACZC,SAAU,SAAAC,GAAC,OAAIJ,EA9DX,SAACK,EAAOC,GAE5B,IADA,IAAMC,EAAc,GACXC,EAAI,EAAGA,EAAIV,EAAUW,OAAQD,IACnB,eAAXF,EACIR,EAAUU,GAAGE,KAAKC,MAAMC,cAAcC,WAAWR,EAAMO,gBACvDL,EAAYO,KAAKhB,EAAUU,IAEb,UAAXF,EACHR,EAAUU,GAAGf,MAAMmB,cAAcC,WAAWR,EAAMO,gBAClDL,EAAYO,KAAKhB,EAAUU,IAEb,UAAXF,EACHR,EAAUU,GAAGd,MAAMqB,WAAWF,WAAWR,EAAMU,aAC/CR,EAAYO,KAAKhB,EAAUU,IAEb,UAAXF,EACHR,EAAUU,GAAGQ,SAASrB,MAAMiB,cAAcC,WAAWR,EAAMO,gBAC3DL,EAAYO,KAAKhB,EAAUU,IAG3BV,EAAUU,GAAGE,KAAKO,KAAKL,cAAcC,WAAWR,EAAMO,gBACtDL,EAAYO,KAAKhB,EAAUU,IAIvC,OAAOD,EAqCuCW,CAAgBd,EAAEe,OAAOd,MAAOe,SAASC,eAAe,aAAahB,cAKnH,2BAAOJ,GAAG,YACN,+BACI,4BACI,wBAAIqB,UAAU,aACd,wBAAIA,UAAU,WAAWC,QAAS,SAAAnB,GAAC,OAAKJ,EAAeI,EAAEoB,cAAcC,eAAvE,cACA,wBAAIH,UAAU,WAAWC,QAAS,SAAAnB,GAAC,OAAKJ,EAAeI,EAAEoB,cAAcC,eAAvE,aACA,wBAAIH,UAAU,WAAWC,QAAS,SAAAnB,GAAC,OAAKJ,EAAeI,EAAEoB,cAAcC,eAAvE,SACA,wBAAIH,UAAU,WAAWC,QAAS,SAAAnB,GAAC,OAAKJ,EAAeI,EAAEoB,cAAcC,eAAvE,SACA,wBAAIH,UAAU,WAAWC,QAAS,SAAAnB,GAAC,OAAKJ,EAAeI,EAAEoB,cAAcC,eAAvE,WAGR,+BACK1B,EAAY2B,KAAI,SAAAC,GAAQ,OACrB,kBAAC,EAAD,CAActC,QAASsC,EAAStC,QAAQuC,MACpCrC,UAAWoC,EAASjB,KAAKC,MACzBnB,SAAUmC,EAASjB,KAAKO,KACxBxB,MAAOkC,EAASlC,MAChBC,MAAOiC,EAASjC,MAChBC,MAAOgC,EAASX,SAASrB,MACzBkC,IAAKF,EAASjB,KAAKO,KAAOU,EAASjB,KAAKC,WARpD,Q,MCzEGmB,MAVf,WACE,OACE,6BAEE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOhB,SAASiB,UAEe,UAA7BD,OAAOhB,SAASiB,UAEhBD,OAAOhB,SAASiB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjB,SAASC,eAAe,SDyHpB,kBAAmBiB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ba643abc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction EmployeeCard (props) {\r\n    return (\r\n        <tr>\r\n            <td>\r\n                <img src={props.picture} alt=\"pic\"></img>\r\n            </td>\r\n            <td>\r\n                {props.firstName}\r\n            </td>\r\n            <td>\r\n                {props.lastName}\r\n            </td>\r\n            <td>\r\n                {props.email}\r\n            </td>\r\n            <td>\r\n                {props.phone}\r\n            </td>\r\n            <td>\r\n                {props.state}\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default EmployeeCard;","import React, { useState } from \"react\";\r\nimport EmployeeCard from \"../employeeCard\"\r\nimport employees from \"../../employees.json\"\r\nimport \"./style.css\";\r\n\r\nfunction EmployeeList() {\r\n    const [employeeArr, setEmployeeArr] = useState(employees);\r\n\r\n    // filters employees by category\r\n    const filterEmployees = (value, search) => {\r\n        const filteredArr = [];\r\n        for (let i = 0; i < employees.length; i++) {\r\n            if (search === \"First Name\") {\r\n                if (employees[i].name.first.toLowerCase().startsWith(value.toLowerCase())) {\r\n                    filteredArr.push(employees[i]);\r\n                }\r\n            } else if (search === \"Email\") {\r\n                if (employees[i].email.toLowerCase().startsWith(value.toLowerCase())) {\r\n                    filteredArr.push(employees[i]);\r\n                }\r\n            } else if (search === \"Phone\") {\r\n                if (employees[i].phone.toString().startsWith(value.toString())) {\r\n                    filteredArr.push(employees[i]);\r\n                }\r\n            } else if (search === \"State\") {\r\n                if (employees[i].location.state.toLowerCase().startsWith(value.toLowerCase())) {\r\n                    filteredArr.push(employees[i]);\r\n                }\r\n            } else {\r\n                if (employees[i].name.last.toLowerCase().startsWith(value.toLowerCase())) {\r\n                    filteredArr.push(employees[i]);\r\n                }\r\n            }\r\n        }\r\n        return filteredArr;\r\n    }\r\n\r\n    // sorts employees in alphabetical order depending on selected category\r\n    function sortEmployees (value) {\r\n        \r\n        let sortArr = employeeArr.slice();\r\n        if (value === \"First Name\") {\r\n            sortArr.sort((a,b) => (a.name.first > b.name.last) ? 1 : -1)\r\n        } else if (value === \"Last Name\") {\r\n            sortArr.sort((a,b) => (a.name.last > b.name.last) ? 1 : -1);\r\n        } else if (value === \"Email\") {\r\n            sortArr.sort((a,b) => (a.email > b.email) ? 1 : -1);\r\n        } else if (value === \"Phone\") {\r\n            sortArr.sort((a,b) => (a.phone > b.phone) ? 1 : -1);\r\n        } else if (value === \"State\") {\r\n            sortArr.sort((a,b) => (a.location.state > b.location.state) ? 1 : -1);\r\n        }\r\n        return sortArr;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"searchTopper\">\r\n                <form>\r\n                    <label> Search by:\r\n                        <select id=\"searchBox\">\r\n                            <option>First Name</option>\r\n                            <option>Last Name</option>\r\n                            <option>Email</option>\r\n                            <option>Phone</option>\r\n                            <option>State</option>\r\n                        </select>\r\n                    </label>\r\n                    <div id=\"searchKeys\">\r\n                        <p>Enter search keywords here:</p>\r\n                        <input type=\"text\"\r\n                        onChange={e => setEmployeeArr(filterEmployees(e.target.value, document.getElementById(\"searchBox\").value))}/>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        \r\n        <table id=\"empTable\">\r\n            <thead>\r\n                <tr>\r\n                    <th className=\"tableDir\"></th>\r\n                    <th className=\"tableDir\" onClick={e => (setEmployeeArr(e.currentTarget.textContent))}>First Name</th>\r\n                    <th className=\"tableDir\" onClick={e => (setEmployeeArr(e.currentTarget.textContent))}>Last Name</th>\r\n                    <th className=\"tableDir\" onClick={e => (setEmployeeArr(e.currentTarget.textContent))}>Email</th>\r\n                    <th className=\"tableDir\" onClick={e => (setEmployeeArr(e.currentTarget.textContent))}>Phone</th>\r\n                    <th className=\"tableDir\" onClick={e => (setEmployeeArr(e.currentTarget.textContent))}>State</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {employeeArr.map(employee => (\r\n                    <EmployeeCard picture={employee.picture.large}\r\n                        firstName={employee.name.first}\r\n                        lastName={employee.name.last}\r\n                        email={employee.email}\r\n                        phone={employee.phone}\r\n                        state={employee.location.state}\r\n                        key={employee.name.last + employee.name.first}/>\r\n                ))};\r\n            </tbody>\r\n        </table>\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default EmployeeList;","import React from 'react';\nimport EmployeeList from \"./components/employeeList\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n\n      <EmployeeList />\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}